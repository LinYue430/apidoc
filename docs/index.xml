<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="./index.xsl"?>

<!--
这是官网首页内容，同时也是简体中文的本地化内容。

其它语言的本化地内容，需要重新改写本文件中除注释外的所有内容。
-->

<docs lang="cmn-Hans">
    <title>apidoc | RESTful API 文档处理工具</title>
    <license url="https://creativecommons.org/licenses/by/4.0/deed.zh">署名 4.0 国际 (CC BY 4.0)</license>

    <!-- 一些翻译比较零散的翻译内容 -->
    <locales>
        <header> <!-- 表格报头 -->
            <name>名称</name>
            <type>类型</type>
            <required>必填</required>
            <description>描述</description>
        </header>
        <goto-top>返回顶部</goto-top>
    </locales>

    <doc id="about" title="关于">
        <p>apidoc 是一个简单的 <abbr title="Representational State Transfer">RESTful</abbr> <abbr title="Application Programming Interface">API</abbr> 文档生成工具，它从代码注释中提取特定格式的内容生成文档。支持诸如 Go、Java、C++、Rust 等大部分开发语言，具体可使用 <code>apidoc lang</code> 命令行查看所有的支持列表。</p>

        <p>apidoc 拥有以下特点：</p>
        <ol>
            <li>跨平台，linux、windows、macOS 等都支持；</li>
            <li>支持语言广泛，即使是不支持，也很方便扩展；</li>
            <li>支持多个不同语言的多个项目生成一份文档；</li>
            <li>输出模板可自定义；</li>
            <li>根据文档生成 mock 数据；</li>
        </ol>

        <p>以下是一段简短的 C 语言风格代码下的示例：</p>
        <pre><code class="language-markup"><![CDATA[/**
 * <api method="GET" summary="获取所有的用户信息">
 *     <path path="/users">
 *         <query name="page" type="number" default="0">显示第几页的内容</query>
 *         <query name="size" type="number" default="20">每页显示的数量</query>
 *     </path>
 *     <tag>user</tag>
 *     <server>users</server>
 *     <response status="200" type="object" mimetype="application/json">
 *         <param name="count" type="int" optional="false" summary="符合条件的所有用户数量" />
 *         <param name="users" type="object" array="true" summary="用户列表">
 *             <param name="id" type="int" summary="唯一 ID" />
 *             <param name="name" type="string" summary="姓名" />
 *         </param>
 *     </response>
 *     <response status="500" mimetype="application/json" type="object">
 *         <param name="code" type="int" summary="错误代码" />
 *         <param name="msg" type="string" summary="错误内容" />
 *     </response>
 * </api>
 */]]></code></pre>
    </doc>

    <doc id="usage" title="使用" />

    <doc id="spec" title="文档格式">
        <p>文档采用 XML 格式。存在两个顶级标签：<code>apidoc</code> 和 <code>api</code>，用于描述整体内容和具体接口信息。</p>

        <p>文档被从注释中提取之后，最终会被合并成一个 XML 文件，在该文件中 <code>api</code> 作为 <code>apidoc</code> 的一个子元素存在，如果你的项目不想把文档写在注释中，也可以直接编写一个完整的 XML 文件，将 <code>api</code> 作为 <code>apidoc</code> 的一个子元素。</p>

        <p>具体可参考<a href="./example/index.xml">示例代码</a>。</p>

        <p>以下是对各个 XML 元素以及参数介绍，其中以 <code>@</code> 开头的表示 XML 属性；<code>.</code> 表示为当前元素的内容；其它表示子元素。</p>
    </doc>

    <!--######################### 以下为文档内容的子项 ###########################-->

    <doc id="install" title="安装" parent="usage">
        <p>可以直接从 <a href="https://github.com/caixw/apidoc/releases">https://github.com/caixw/apidoc/releases</a> 查找你需要的版本下载，放入 <var>PATH</var> 中即可使用。如果没有你需要的平台文件，则需要从源代码编译：</p>
        <ul>
            <li>下载 <a href="https://golang.org/dl/">Go</a>；</li>
            <li>下载源代码，<samp>git clone github.com/caixw/apidoc</samp>；</li>
            <li>执行代码中 <code>build/build.sh</code> 或是 <code>build/build.cmd</code> 进行编译；</li>
            <li>编译好的文件存放在 <code>cmd/apidoc</code> 下，可以将该文件放置在 <var>PATH</var> 目录；</li>
        </ul>
    </doc>

    <doc id="env" title="环境变量" parent="usage">
        <p>apidoc 会读取 <var>LANG</var> 的环境变量作为其本地化的依据，若想指定其它语种，可以手动指定 <var>LANG</var> 环境变量：<samp>LANG=zh-Hant apidoc</samp>。在 windows 系统中，若不存在 <var>LANG</var> 环境变量，则会调用 <code>GetUserDefaultLocaleName</code> 函数来获取相应的语言信息。</p>
        <p>本地化的 ID 值，理论上只要 <a href="https://tools.ietf.org/html/bcp47">BCP47</a> 支持的都能正确识别。也支持 Linux 下带编码的格式，比如：<samp>zh_CN.UTF-8</samp>。</p>
    </doc>

    <doc id="ide" title="IDE 插件" parent="usage">
        <p>apidoc 支持以 <a href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/"><abbr title="language server protocol">LSP</abbr></a> 模式运行：<samp>apidoc lsp -p=":8080" -m=stdio -h</samp>。所有支持 LSP 的 IDE 和编辑器很容易实现对应的插件。目前官方已经提供了针对 vscode 的插件：<a href="https://marketplace.visualstudio.com/items?itemName=caixw.apidoc">apidoc.vscode</a>。</p>
    </doc>

    <doc id="mock" title="Mock" parent="usage">
        <p>mock 子命令可以让 apidoc 根据文档动态生成 mock 数据，mock 子命令提供了大量的配置项，以使生成的数据更有随机性，具体的命令项可以通过 <samp>apidoc help mock</samp> 查看。</p>

        <p>如果数据类型为 <var>string.image</var>，会自动生成一张指定大小的图片并把地址返回给用户，其大小由查询参数 <code>width</code> 和 <code>height</code> 指定，未指定则是 <var>500x500</var>。图片类型则通过用户提交的 <code>Accept</code> 报头获取，目前支持 <var>image/gif</var>、<var>image/png</var> 和 <var>image/jpeg</var> 三种类型。</p>

        <p>使用 mock 也有一定的局限性：只能判断提交的数据是否符合要求，但是无法理解数据代码的含义，比如 URL 中包含 page=2，能判断 page 的值格式是否正确，但无法给用户返回第二页的数据。Mock 在验证数据正确性和初期用于展示数据内容还是很有用的。</p>
    </doc>

    <doc id="cli" title="命令行" parent="usage">
        <p>可以通过 <samp>apidoc help</samp> 查看命令行支持的子命令。包含了以下几个：</p>
    </doc>

    <doc id="config-file" title="配置文件" parent="usage">
        <p>配置文件名固定为 <code>.apidoc.yaml</code>，格式为 YAML，可参考 <a href="example/.apidoc.yaml">.apidoc.yaml</a>。文件可以通过命令 <samp>apidoc detect</samp> 生成。主要包含了以几个配置项：</p>
    </doc>

    <footer>
        <license>
            <p>当前页面内容托管于 </p><p>，并采用</p><p>进行许可。</p>
        </license>
    </footer>
</docs>
