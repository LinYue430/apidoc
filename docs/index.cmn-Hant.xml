<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="./index.xsl"?>

<!--
這是官網首頁內容，同時也是簡體中文的本地化內容。

其它語言的本化地內容，需要重新改寫本文件中除註釋外的所有內容。
-->

<docs lang="cmn-Hant">
    <title>apidoc | RESTful API 文檔處理工具</title>
    <license url="https://creativecommons.org/licenses/by/4.0/deed.zh">署名 4.0 國際 (CC BY 4.0)</license>

    <!-- 壹些翻譯比較零散的翻譯內容 -->
    <locales>
        <header> <!-- 表格報頭 -->
            <name>名稱</name>
            <type>類型</type>
            <required>必填</required>
            <description>描述</description>
        </header>
        <goto-top>返回頂部</goto-top>
    </locales>

    <doc id="about" title="關於">
        <p>apidoc 是壹個簡單的 <abbr title="Representational State Transfer">RESTful</abbr> <abbr title="Application Programming Interface">API</abbr> 文檔生成工具，它從代碼註釋中提取特定格式的內容生成文檔。支持諸如 Go、Java、C++、Rust 等大部分開發語言，具體可使用 <code>apidoc lang</code> 命令行查看所有的支持列表。</p>

        <p>apidoc 擁有以下特點：</p>
        <ol>
            <li>跨平臺，linux、windows、macOS 等都支持；</li>
            <li>支持語言廣泛，即使是不支持，也很方便擴展；</li>
            <li>支持多個不同語言的多個項目生成壹份文檔；</li>
            <li>輸出模板可自定義；</li>
            <li>根據文檔生成 mock 數據；</li>
        </ol>

        <p>以下是壹段簡短的 C 語言風格代碼下的示例：</p>
        <pre><code class="language-markup"><![CDATA[/**
 * <api method="GET" summary="獲取所有的用戶信息">
 *     <path path="/users">
 *         <query name="page" type="number" default="0">顯示第幾頁的內容</query>
 *         <query name="size" type="number" default="20">每頁顯示的數量</query>
 *     </path>
 *     <tag>user</tag>
 *     <server>users</server>
 *     <response status="200" type="object" mimetype="application/json">
 *         <param name="count" type="int" optional="false" summary="符合條件的所有用戶數量" />
 *         <param name="users" type="object" array="true" summary="用戶列表">
 *             <param name="id" type="int" summary="唯壹 ID" />
 *             <param name="name" type="string" summary="姓名" />
 *         </param>
 *     </response>
 *     <response status="500" mimetype="application/json" type="object">
 *         <param name="code" type="int" summary="錯誤代碼" />
 *         <param name="msg" type="string" summary="錯誤內容" />
 *     </response>
 * </api>
 */]]></code></pre>
    </doc>

    <doc id="usage" title="使用" />

    <doc id="spec" title="文檔格式">
        <p>文檔采用 XML 格式。存在兩個頂級標簽：<code>apidoc</code> 和 <code>api</code>，用於描述整體內容和具體接口信息。</p>

        <p>文檔被從註釋中提取之後，最終會被合並成壹個 XML 文件，在該文件中 <code>api</code> 作為 <code>apidoc</code> 的壹個子元素存在，如果妳的項目不想把文檔寫在註釋中，也可以直接編寫壹個完整的 XML 文件，將 <code>api</code> 作為 <code>apidoc</code> 的壹個子元素。</p>

        <p>具體可參考<a href="./example/index.xml">示例代碼。</a></p>

        <p>以下是對各個 XML 元素以及參數介紹，其中以 <code>@</code> 開頭的表示 XML 屬性；<code>.</code> 表示為當前元素的內容；其它表示子元素。</p>
    </doc>

    <!--######################### 以下为文档内容的子项 ###########################-->

    <doc id="install" title="安裝" parent="usage">
          <p>可以直接從 <a href="https://github.com/caixw/apidoc/releases">https://github.com/caixw/apidoc/releases</a> 查找妳需要的版本下載，放入 <var>PATH</var> 中即可使用。如果沒有妳需要的平臺文件，則需要從源代碼編譯：</p>
        <ul>
            <li>下載 <a href="https://golang.org/dl/">Go</a>；</li>
            <li>下載源代碼，<samp>git clone github.com/caixw/apidoc</samp>；</li>
            <li>執行代碼中 <code>build/build.sh</code> 或是 <code>build/build.cmd</code> 進行編譯；</li>
            <li>編譯好的文件存放在 cmd/apidoc 下，可以將該文件放置在 <var>PATH</var> 目錄；</li>
        </ul>
    </doc>

    <doc id="env" title="環境變量" parent="usage">
        <p>apidoc 會讀取 <var>LANG</var> 的環境變量作為其本地化的依據，若想指定其它語種，可以手動指定 <var>LANG</var> 環境變量：<samp>LANG=zh-Hant apidoc</samp>。在 windows 系統中，若不存在 <var>LANG</var> 環境變量，則會調用 <code>GetUserDefaultLocaleName</code> 函數來獲取相應的語言信息。</p>
    </doc>

    <doc id="ide" title="IDE 插件" parent="usage">
        <p>apidoc 支持以 <a href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/"><abbr title="language server protocol">LSP</abbr></a> 模式運行：<samp>apidoc lsp -p=":8080" -m=stdio -h</samp>。所有支持 LSP 的 IDE 和編輯器很容易實現對應的插件。目前官方已經提供了針對 vscode 的插件：<a href="https://marketplace.visualstudio.com/items?itemName=caixw.apidoc">apidoc.vscode</a>。</p>
    </doc>

    <doc id="mock" title="Mock" parent="usage">
        <p>mock 子命令可以讓 apidoc 根據文檔動態生成 mock 數據，mock 子命令提供了大量的配置項，以使生成的數據更有隨機性，具體的命令項可以通過 <samp>apidoc help mock</samp> 查看。</p>

        <p>如果數據類型為 <var>string.image</var>，會自動生成壹張指定大小的圖片並把地址返回給用戶，其大小由查詢參數 <code>width</code> 和 <code>height</code> 指定，未指定則是 <var>500x500</var>。圖片類型則通過用戶提交的 <code>Accept</code> 報頭獲取，目前支持 <var>image/gif</var>、<var>image/png</var> 和 <var>image/jpeg</var> 三種類型。</p>

        <p>使用 mock 也有壹定的局限性：只能判斷提交的數據是否符合要求，但是無法理解數據代碼的函議，比如 URL 中包含 page=2，能判斷 page 的值格式是否正確，但無法給用戶返回第二頁的數據。Mock 在驗證數據正確性和初期用於展示數據內容還是很有用的。</p>
    </doc>

    <doc id="cli" title="命令行" parent="usage">
        <p>可以通過 <samp>apidoc help</samp> 查看命令行支持的子命令。包含了以下幾個：</p>
    </doc>

    <doc id="apidoc.yaml" title=".apidoc.yaml" parent="usage">
        <p>配置文件名固定為 <code>.apidoc.yaml</code>，格式為 YAML，可參考 <a href="example/.apidoc.yaml">.apidoc.yaml</a>。文件可以通過命令 <samp>apidoc detect</samp> 生成。主要包含了以幾個配置項：</p>
    </doc>

    <footer>
        <license>
            <p>當前頁面內容托管於 </p><p>，並采用</p><p>進行許可。</p>
        </license>
    </footer>
</docs>
